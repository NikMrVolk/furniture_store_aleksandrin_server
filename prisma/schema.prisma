generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  SIMPLE_MAIL
  GOOGLE
  YANDEX
  MAILRU
}

enum OrderStatus {
  IN_PROCESSING
  PREPARING_FOR_SHIPMENT
  ON_THE_WAY
  COMPLETED
}
// block user witch spam mails bigger than 5 in week
model TotalActivationAttempts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  unauthorizedUserKey   String @unique @map("unauthorized-user-key")
  totalSendMailAttempts Int    @default(1) @map("total_number_attempts")

  userActivation UserActivation? @relation(map: "user_activations")

  @@map("total_activation_attempts")
}

model UserActivation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  email              String @unique
  activationCode     String @map("activation_code")
  activationAttempts Int    @default(1) @map("activation_attempt")

  totalActivationAttemptId Int                     @unique @map("total_activation_attempt_id")
  totalActivationAttempt   TotalActivationAttempts @relation(map: "total_activation_attempts", fields: [totalActivationAttemptId], references: [id], onDelete: Cascade)

  @@map("user_activations")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  email String @unique

  profile Profile?
  address Address? @relation("UserAddress", map: "user_address")

  provider Provider?
  roles    Role[]    @default([USER])
  sessions Session[]

  cart     Cart?
  favorite Favorite?
  orders   Order[]

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name    String?
  surname String?
  phone   String?

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshToken String   @map("refresh_token")
  accessToken  String   @map("access_token")
  fingerprint  String
  expiresIn    DateTime @map("expires_in")

  @@map("sessions")
}

model UnregisteredSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  unauthorizedUserKey String @unique

  unregisteredCart UnregisteredCart? @relation(map: "safsadfsad")

  @@map("unregistered_sessions")
}

model UnregisteredCart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  unregisteredCartItem UnregisteredCartItem[]

  unregisteredSessionId Int                 @unique @map("unregistered_session_id")
  unregisteredSession   UnregisteredSession @relation(map: "unregistered_session", fields: [unregisteredSessionId], references: [id], onDelete: Cascade)

  @@map("unregistered_carts")
}

model UnregisteredCartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  quantity Int

  unregisteredCartId Int              @map("unregistered_cart_id")
  unregisteredCart   UnregisteredCart @relation(fields: [unregisteredCartId], references: [id], onDelete: Cascade)

  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  @@map("unregistered_cart_items")
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  cartItems CartItem[]

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  quantity Int

  cartId Int  @map("cart_id")
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  @@map("cart_items")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  favoriteItem FavoriteItem[]

  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model FavoriteItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  favoriteId Int      @map("favorite_id")
  favorite   Favorite @relation(fields: [favoriteId], references: [id])

  @@map("favorite_items")
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  info            ItemInfo?
  characteristics ItemCharacteristic[]

  cartItem             CartItem[]
  unregisteredCartItem UnregisteredCartItem[]
  favoriteItems        FavoriteItem[]
  orderItems           OrderItem[]

  brandId Int    @map("brand_id")
  brand   Brand? @relation(fields: [brandId], references: [id])
  typeId  Int    @map("type_id")
  type    Type?  @relation(fields: [typeId], references: [id])

  @@map("items")
}

model ItemInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  count       Int
  title       String
  description String?
  price       String
  images      String[]
  isStock     Boolean  @map("is_stock")
  isArchive   Boolean  @map("is_archive")

  itemId Int  @unique @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  @@map("items_info")
}

model ItemCharacteristic {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  @@map("item_characteristics")
}

model Brand {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  title String

  items Item[]

  @@map("brands")
}

model Type {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  parentTypeId Int? @map("parent_type_id")

  title String
  image String?
  icon  String?

  items Item[]

  @@map("types")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  totalCount String      @map("total_count")
  status     OrderStatus

  orderItems OrderItem[]
  address    Address?    @relation("OrderAddress", map: "order_address")

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id])

  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  locality  String
  street    String
  house     String
  entrance  String?
  floor     String?
  apartment String?
  doorphone String?

  orderId Int?   @unique @map("order_id")
  order   Order? @relation("OrderAddress", fields: [orderId], references: [id])

  userId Int?  @unique @map("user_id")
  user   User? @relation("UserAddress", fields: [userId], references: [id])

  @@map("addresses")
}
